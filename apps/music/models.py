from django.db import models

class Song(models.Model):
    location=models.CharField(max_length=255)
    album=models.CharField(max_length=100)
    source=models.CharField(max_length=255)
    bpm=models.CharField(max_length=100)
    compilation=models.CharField(max_length=100)
    rating=models.IntegerField(default=0)
    composer=models.CharField(max_length=100)
    copyrightdate=models.CharField(max_length=100)
    encodedby=models.CharField(max_length=100)
    lyricist=models.CharField(max_length=100)
    length=models.CharField(max_length=100)
    media=models.CharField(max_length=100)
    mood=models.CharField(max_length=100)
    title=models.CharField(max_length=100)
    version=models.CharField(max_length=100)
    artist=models.CharField(max_length=100)
    albumartist=models.CharField(max_length=100)
    conductor=models.CharField(max_length=100)
    arranger=models.CharField(max_length=100)
    discnumber=models.CharField(max_length=100)
    tracknumber=models.CharField(max_length=100)
    author=models.CharField(max_length=100)
    isrc=models.CharField(max_length=100)
    discsubtitle=models.CharField(max_length=100)
    language=models.CharField(max_length=100)
    genre=models.CharField(max_length=100)
    date=models.CharField(max_length=100)
    originaldate=models.CharField(max_length=100)
    performer=models.CharField(max_length=100)
    organization=models.CharField(max_length=100)
    musicbrainz_trackid=models.CharField(max_length=100)
    website=models.CharField(max_length=100)
    replaygain=models.CharField(max_length=100)
    replaygainpeak=models.CharField(max_length=100)
    musicbrainz_artistid=models.CharField(max_length=100)
    musicbrainz_albumid=models.CharField(max_length=100)
    musicbrainz_albumartistid=models.CharField(max_length=100)
    musicbrainz_trmid=models.CharField(max_length=100)
    musicip_puid=models.CharField(max_length=100)
    musicip_fingerprint=models.CharField(max_length=100)
    musicbrainz_albumstatus=models.CharField(max_length=100)
    musicbrainz_albumtype=models.CharField(max_length=100)
    releasecountry=models.CharField(max_length=100)
    musicbrainz_discid=models.CharField(max_length=100)
    asin=models.CharField(max_length=100)
    barcode=models.CharField(max_length=100)
    catalognumber=models.CharField(max_length=100)
    musicbrainz_releasetrackid=models.CharField(max_length=100)
    musicbrainz_releasegroupid=models.CharField(max_length=100)
    performer2=models.CharField(max_length=100)
    musicbrainz_workid=models.CharField(max_length=100)
    acoustid_fingerprint=models.CharField(max_length=100)
    acoustid_id=models.CharField(max_length=100)
    playbackgap=models.CharField(max_length=100)
    comment=models.CharField(max_length=255)
    work=models.CharField(max_length=100)
    movement=models.CharField(max_length=100)
    def __repr__(self):
        return ("Song #{}: {} by {}".format(self.id,self.title,self.artist))

class Tag(models.Model):
    name=models.CharField(max_length=100)
    songs = models.ManyToManyField(Song, related_name="tags")    
    relatives= models.ManyToManyField('self', related_name="relatedtags")
    def __repr__(self):
        return ("Song: {}".format(self.name))

class Playlist(models.Model):
    name=models.CharField(max_length=100)
    relatedplaylists= models.ManyToManyField('self', related_name="companionplaylists")
    songs=models.ManyToManyField(Song, through='Listing',related_name='playlists')
    dislikesongs=models.ManyToManyField(Song, related_name='forbiddenplaylists')
    description=models.TextField()
    kind=models.CharField(max_length=20)

class Listing(models.Model):
    song=models.ForeignKey(Song, on_delete=models.CASCADE)
    playlist=models.ForeignKey(Playlist, on_delete=models.CASCADE)
    created_at=models.DateTimeField(auto_now_add=True)
    updated_at=models.DateTimeField(auto_now_add=True)
